{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onMount } from 'svelte';\nonMount(() => {\n    const p5 = require('p5');\n    const frames = 60;\n    const sketch = function (p) {\n        // vars\n        let myFont = null;\n        let brightUp = true;\n        // consts\n        const lines = [];\n        const colorBrightness = [];\n        const moonCoord = {\n            x: window.innerWidth / 2,\n            y: window.innerHeight / 2 - 200,\n        };\n        // init\n        for (let i = 0; i < frames; i++) {\n            colorBrightness[i] = i * (255 / frames);\n        }\n        // preload\n        p.preload = function () {\n            myFont = p.loadFont('./brutal-tooth.otf');\n        };\n        // setup\n        p.setup = function () {\n            p.createCanvas(window.innerWidth, window.innerHeight);\n            //background noir\n            p.background(0);\n            // 60 fps\n            p.frameRate(frames);\n            p.textFont(myFont);\n            p.textSize(100);\n            for (let i = 0; i <= 50; i++) {\n                const x = p.random(0, window.innerWidth);\n                const y = p.random(500, window.innerHeight);\n                lines.push({ x, y });\n                lines.push({ x, y: y + p.random(500, p.height - 100) });\n            }\n        };\n        // draw\n        p.draw = function () {\n            p.background(0);\n            p.noStroke();\n            p.circle(moonCoord.x, moonCoord.y, 150);\n            p.stroke(215, 215, 215);\n            // p.text('NOIRE', window.innerWidth / 2, 100)\n            // p.textAlign(p.CENTER, p.TOP)\n            p.strokeWeight(3);\n            const color = brightUp ? colorBrightness.shift() : colorBrightness.pop();\n            brightUp ? colorBrightness.push(color) : colorBrightness.unshift(color);\n            p.stroke(color);\n            if (p.frameCount % frames === 0) {\n                brightUp = !brightUp;\n            }\n            p.beginShape(p.LINES);\n            for (let i = 0; i <= lines.length - 1; i++) {\n                p.vertex(lines[i].x, lines[i].y);\n            }\n            p.endShape();\n        };\n    };\n    new p5(sketch, 'container');\n});\nexport let name;\n</script>\n\n<main>\n\t<h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAwEC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC"
}